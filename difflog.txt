diff --cc app/controllers/currency.js
index 5942f5b7,36feb936..00000000
--- a/app/controllers/currency.js
+++ b/app/controllers/currency.js
@@@ -42,11 -42,14 +42,22 @@@ exports.index = function(req, res) 
    var currentTime = +new Date();
    if (bitstampRate === 0 || currentTime >= (timestamp + delay)) {
      timestamp = currentTime;
++<<<<<<< HEAD
 +    bitstampRate = 1.337;
 +
 +    res.jsonp({
 +    status: 200,
 +      data: { bitstamp: bitstampRate }
++=======
+ 
+     _request('https://www.cryptonator.com/api/ticker/aur-usd', function(err, data) {
+       if (!err) bitstampRate = parseFloat(JSON.parse(data)['ticker']['price']);
+ 
+       res.jsonp({
+         status: 200,
+         data: { bitstamp: bitstampRate }
+       });
++>>>>>>> origin/master
      });
    } else {
      res.jsonp({
diff --cc config/config.js
index ef81876b,d0feb218..00000000
--- a/config/config.js
+++ b/config/config.js
@@@ -24,8 -24,8 +24,13 @@@ var home = process.env.INSIGHT_DB || (g
  env = 'livenet';
  db = home;
  port = '3000';
++<<<<<<< HEAD
 +b_port = '14243';
 +p2p_port = '12337';
++=======
+ b_port = '8332';
+ p2p_port = '11337';
++>>>>>>> origin/master
  
  port = parseInt(process.env.INSIGHT_PORT) || port;
  
@@@ -42,7 -42,7 +47,11 @@@ switch (process.env.NODE_ENV) 
      break;
  }
  
++<<<<<<< HEAD
 +var network = process.env.INSIGHT_NETWORK || 'livenet';
++=======
+ var network = process.env.INSIGHT_NETWORK || 'testnet';
++>>>>>>> origin/master
  
  var dataDir = process.env.BITCOIND_DATADIR;
  var isWin = /^win/.test(process.platform);
@@@ -53,7 -53,7 +62,11 @@@ if (!dataDir) 
    if (isMac) dataDir = process.env.HOME + '/Library/Application Support/Smileycoin/';
    if (isLinux) dataDir = process.env.HOME + '/.smileycoin/';
  }
++<<<<<<< HEAD
 +dataDir += network === 'testnet' ? 'testnet' : '';
++=======
+ // dataDir += network === 'testnet' ? 'testnet3' : '';
++>>>>>>> origin/master
  
  var safeConfirmations = process.env.INSIGHT_SAFE_CONFIRMATIONS || 6;
  var ignoreCache = process.env.INSIGHT_IGNORE_CACHE || 0;
@@@ -61,8 -61,8 +74,13 @@@
  
  var bitcoindConf = {
    protocol: process.env.BITCOIND_PROTO || 'http',
++<<<<<<< HEAD
 +  user: process.env.BITCOIND_USER || 'testnet2',
 +  pass: process.env.BITCOIND_PASS || 'JCCKSZ486JoE2DuNuAYMsHayfk1uMegXRep24HaT1Z7J',
++=======
+   user: process.env.BITCOIND_USER || 'user',
+   pass: process.env.BITCOIND_PASS || 'pass',
++>>>>>>> origin/master
    host: process.env.BITCOIND_HOST || '127.0.0.1',
    port: process.env.BITCOIND_PORT || b_port,
    p2pPort: process.env.BITCOIND_P2P_PORT || p2p_port,
diff --cc lib/HistoricSync.js
index 3699fa4f,a4b04ff1..00000000
--- a/lib/HistoricSync.js
+++ b/lib/HistoricSync.js
@@@ -175,8 -175,7 +175,12 @@@ HistoricSync.prototype.checkNetworkSett
  
    // check network config
    self.rpc.getBlockHash(0, function(err, res){
++<<<<<<< HEAD
 +    console.log("RES"+res);
 +    console.log("SELF-GENESIS"+self.genesis);
++=======
+     console.log(res);
++>>>>>>> origin/master
      if (!err && ( res && res.result !== self.genesis)) {
        err = new Error(BAD_GEN_ERROR + config.network);
      }
diff --cc package.json
index 7e56b2f2,d3e734a8..00000000
--- a/package.json
+++ b/package.json
@@@ -6,10 -6,7 +6,14 @@@
      "name": "Ryan X Charles",
      "email": "ryan@bitpay.com"
    },
++<<<<<<< HEAD
 +  "repository": {
 +    "type": "git",
 +    "url": "git://github.com/auroracointools/insight-api.git"
 +  },
++=======
+   "repository": "git://github.com/auroracointools/insight-api.git",
++>>>>>>> origin/master
    "contributors": [
      {
        "name": "Matias Alejo Garcia",
@@@ -53,16 -50,14 +57,26 @@@
    "engines": {
      "node": "*"
    },
++<<<<<<< HEAD
 +  "bin": {
 +    "insight-bitcore-api": "insight.js"
 +  },
++=======
+   "bin": "insight.js",
++>>>>>>> origin/master
    "scripts": {
      "start": "node node_modules/grunt-cli/bin/grunt"
    },
    "dependencies": {
++<<<<<<< HEAD
 +    "async": "2.0.0",
 +    "base58-native": "0.1.2",
 +    "bignum": "0.10.0",
++=======
+     "async": "*",
+     "base58-native": "0.1.2",
+     "bignum": "*",
++>>>>>>> origin/master
      "bitauth": "0.1.1",
      "bitcore": "git://github.com/smileycoin/bitcore.git",
      "bufferput": "git://github.com/bitpay/node-bufferput.git",
@@@ -101,12 -96,5 +115,16 @@@
      "memdown": "0.10.2",
      "should": "2.1.1",
      "sinon": "1.10.3"
++<<<<<<< HEAD
 +  },
 +  "gitHead": "0738db4d292ee6b25ac55e7ae0a74c7000f60a19",
 +  "readme": "# *insight API*\n\n*insight API* is an open-source auroracoin blockchain REST\nand websocket API. Insight API runs in NodeJS and uses LevelDB for storage. \n\nThis is a backend-only service. If you're looking for the web frontend application,\ntake a look at https://github.com/stirling/insight.\n\n*Insight API* allows to develop auroracoin-related applications (such as wallets) that \nrequire certain information from the blockchain that auroracoind does not provide.\n\nA blockchain explorer front-end has been developed on top of *Insight API*. It can\nbe downloaded at [Github Insight Repository](https://github.com/stirling/insight).\n\n\n## Prerequisites\n\n* **auroracoind** - Download and Install [Auroracoin](http://auroracoin.org/)\n\n*insight API* needs a *trusted* auroracoind node to run. *insight API* will connect to the node\nthrough the RPC API, auroracoin peer-to-peer protocol, and will even read its raw block .dat files for syncing.\n\nConfigure auroracoind to listen to RPC calls and set `txindex` to true.\nThe easiest way to do this is by copying `./etc/auroracoind/auroracoin.conf` to your\nauroracoin data directory (usually `~/.AuroraCoin` on Linux, `%appdata%\\Auroracoin\\` on Windows,\nor `~/Library/Application Support/AuroraCoin` on Mac OS X).\n\nauroracoind must be running and must have finished downloading the blockchain **before** running *insight API*.\n\n\n* **Node.js v0.10.x** - Download and Install [Node.js](http://www.nodejs.org/download/).\n\n* **NPM** - Node.js package manager, should be automatically installed when you get node.js.\n\n## Quick Install\n  Check the Prerequisites section above before installing.\n\n  To install Insight API, clone the main repository:\n\n    $ git clone https://github.com/stirling/insight-api && cd insight-api\n\n  Install dependencies:\n\n    $ npm install\n\n  Run the main application:\n\n    $ node insight.js\n\n  Then open a browser and go to:\n\n    http://localhost:3000\n\n  Please note that the app will need to sync its internal database\n  with the blockchain state, which may take some time. You can check\n  sync progress at http://localhost:3000/api/sync.\n\n\n## Configuration\n\nAll configuration is specified in the [config](config/) folder, particularly the [config.js](config/config.js) file. There you can specify your application name and database name. Certain configuration values are pulled from environment variables if they are defined:\n\n```\nBITCOIND_HOST         # RPC auroracoind host\nBITCOIND_PORT         # RPC auroracoind Port\nBITCOIND_P2P_HOST     # P2P auroracoind Host (will default to BITCOIND_HOST, if specified)\nBITCOIND_P2P_PORT     # P2P auroracoind Port\nBITCOIND_USER         # RPC username\nBITCOIND_PASS         # RPC password\nBITCOIND_DATADIR      # auroracoind datadir. 'testnet3' will be appended automatically if testnet is used. NEED to finish with '/'. e.g: `/vol/data/`\nINSIGHT_NETWORK [= 'livenet' | 'testnet']\nINSIGHT_PORT          # insight api port\nINSIGHT_DB            # Path where to store insight's internal DB. (defaults to $HOME/.insight)\nINSIGHT_SAFE_CONFIRMATIONS=6  # Nr. of confirmation needed to start caching transaction information   \nINSIGHT_IGNORE_CACHE  # True to ignore cache of spents in transaction, with more than INSIGHT_SAFE_CONFIRMATIONS confirmations. This is useful for tracking double spents for old transactions.\nENABLE_MAILBOX # if \"true\" will enable mailbox plugin\nENABLE_CLEANER # if \"true\" will enable message db cleaner plugin\nENABLE_MONITOR # if \"true\" will enable message db monitor plugin\nENABLE_CURRENCYRATES # if \"true\" will enable a plugin to obtain historic conversion rates for various currencies\nENABLE_RATELIMITER # if \"true\" will enable the ratelimiter plugin\nLOGGER_LEVEL # defaults to 'info', can be 'debug','verbose','error', etc.\nENABLE_HTTPS # if \"true\" it will server using SSL/HTTPS\nENABLE_EMAILSTORE # if \"true\" will enable a plugin to store data with a validated email address\nINSIGHT_EMAIL_CONFIRM_HOST # Only meanfull if ENABLE_EMAILSTORE is enable. Hostname for the confirm URLs. E.g: 'https://insight.bitpay.com'\n\n```\n\nMake sure that auroracoind is configured to [accept incoming connections using 'rpcallowip'](https://en.bitcoin.it/wiki/Running_Bitcoin).\n\nIn case the network is changed (testnet to livenet or vice versa) levelDB database needs to be deleted. This can be performed running:\n```util/sync.js -D``` and waiting for *insight* to synchronize again.  Once the database is deleted, the sync.js process can be safely interrupted (CTRL+C) and continued from the synchronization process embedded in main app.\n\n## Synchronization\n\nThe initial synchronization process scans the blockchain from the paired auroracoind server to update addresses and balances. *insight-api* needs exactly one trusted auroracoind node to run. This node must have finished downloading the blockchain before running *insight-api*.\n\nWhile *insight* is synchronizing the website can be accessed (the sync process is embedded in the webserver), but there may be missing data or incorrect balances for addresses. The 'sync' status is shown at the `/api/sync` endpoint.\n\nThe blockchain can be read from auroracoind's raw `.dat` files or RPC interface. \nReading the information from the `.dat` files is much faster so it's the\nrecommended (and default) alternative. `.dat` files are scanned in the default\nlocation for each platform (for example, `~/.AuroraCoin` on Linux). In case a\nnon-standard location is used, it needs to be defined (see the Configuration section).\nAs of June 2014, using `.dat` files the sync process takes 9 hrs.\nfor livenet and 30 mins. for testnet.\n\nWhile synchronizing the blockchain, *<ins></ins>ight-api* listens for new blocks and\ntransactions relayed by the auroracoind node. Those are also stored on *insight-api*'s database.\nIn case *insight-api* is shutdown for a period of time, restarting it will trigger\na partial (historic) synchronization of the blockchain. Depending on the size of\nthat synchronization task, a reverse RPC or forward `.dat` syncing strategy will be used.\n\nIf auroracoind is shutdown, *insight-api* needs to be stopped and restarted\nonce auroracoind is restarted.\n\n### Syncing old blockchain data manually\n\n  Old blockchain data can be manually synced issuing:\n\n    $ util/sync.js\n\n  Check util/sync.js --help for options, particulary -D to erase the current DB.\n\n  *NOTE*: there is no need to run this manually since the historic synchronization\n  is built in into the web application. Running *insight-api* normally will trigger\n  the historic sync automatically.\n\n\n### DB storage requirement\n\nTo store the blockchain and address related information, *insight-api* uses LevelDB.\nTwo DBs are created: txs and blocks. By default these are stored on\n\n  ``~/.insight/``\n\nPlease note that some older versions of Insight-API store that on `<insight's root>/db`.\n\nThis can be changed at config/config.js. As of March 2015, storing the livenet blockchain takes ~1GB of disk space.\n\n## Development\n\nTo run insight locally for development with grunt:\n\n```$ NODE_ENV=development grunt```\n\nTo run the tests\n\n```$ grunt test```\n\n\nContributions and suggestions are welcome at [insight-api github repository](https://github.com/stirling/insight-api).\n\n## Caching schema\n\nSince v0.2 a new cache schema has been introduced. Only information from transactions with\nINSIGHT_SAFE_CONFIRMATIONS settings will be cached (by default SAFE_CONFIRMATIONS=6). There \nare 3 different caches:\n * Number of confirmations \n * Transaction output spent/unspent status\n * scriptPubKey for unspent transactions\n\nCache data is only populated on request, i.e., only after accessing the required data for\nthe first time, the information is cached, there is not pre-caching procedure.  To ignore \ncache by default, use INSIGHT_IGNORE_CACHE. Also, address related calls support `?noCache=1`\nto ignore the cache in a particular API request.\n\n## API\n\nBy default, insight provides a REST API at `/api`, but this prefix is configurable from the var `apiPrefix` in the `config.js` file.\n\nThe end-points are:\n\n\n### Block\n```\n  /api/block/[:hash]\n  /api/block/00000000a967199a2fad0877433c93df785a8d8ce062e5f9b451cd1397bdbf62\n```\n### Transaction\n```\n  /api/tx/[:txid]\n  /api/tx/525de308971eabd941b139f46c7198b5af9479325c2395db7f2fb5ae8562556c\n```\n### Address\n```\n  /api/addr/[:addr][?noTxList=1&noCache=1]\n  /api/addr/mmvP3mTe53qxHdPqXEvdu8WdC7GfQ2vmx5?noTxList=1\n```\n### Address Properties\n```\n  /api/addr/[:addr]/balance\n  /api/addr/[:addr]/totalReceived\n  /api/addr/[:addr]/totalSent\n  /api/addr/[:addr]/unconfirmedBalance\n```\nThe response contains the value in Satoshis.\n### Unspent Outputs\n```\n  /api/addr/[:addr]/utxo[?noCache=1]\n```\nSample return:\n``` json\n[\n    {\n      address: \"n2PuaAguxZqLddRbTnAoAuwKYgN2w2hZk7\",\n      txid: \"dbfdc2a0d22a8282c4e7be0452d595695f3a39173bed4f48e590877382b112fc\",\n      vout: 0,\n      ts: 1401276201,\n      scriptPubKey: \"76a914e50575162795cd77366fb80d728e3216bd52deac88ac\",\n      amount: 0.001,\n      confirmations: 3\n    },\n    {\n      address: \"n2PuaAguxZqLddRbTnAoAuwKYgN2w2hZk7\",\n      txid: \"e2b82af55d64f12fd0dd075d0922ee7d6a300f58fe60a23cbb5831b31d1d58b4\",\n      vout: 0,\n      ts: 1401226410,\n      scriptPubKey: \"76a914e50575162795cd77366fb80d728e3216bd52deac88ac\",\n      amount: 0.001,\n      confirmation: 6    \n      confirmationsFromCache: true,\n    }\n]\n```\nPlease note that in case confirmations are cached (which happens by default when the number of confirmations is bigger that INSIGHT_SAFE_CONFIRMATIONS) the response will include the pair confirmationsFromCache:true, and confirmations will equal INSIGHT_SAFE_CONFIRMATIONS. See noCache and INSIGHT_IGNORE_CACHE options for details.\n\n\n\n### Unspent Outputs for multiple addresses\nGET method:\n```\n  /api/addrs/[:addrs]/utxo\n  /api/addrs/2NF2baYuJAkCKo5onjUKEPdARQkZ6SYyKd5,2NAre8sX2povnjy4aeiHKeEh97Qhn97tB1f/utxo\n```\n\nPOST method:\n```\n  /api/addrs/utxo\n```\n\nPOST params:\n```\naddrs: 2NF2baYuJAkCKo5onjUKEPdARQkZ6SYyKd5,2NAre8sX2povnjy4aeiHKeEh97Qhn97tB1f\n```\n\n### Transactions by Block\n```\n  /api/txs/?block=HASH\n  /api/txs/?block=00000000fa6cf7367e50ad14eb0ca4737131f256fc4c5841fd3c3f140140e6b6\n```\n### Transactions by Address\n```\n  /api/txs/?address=ADDR\n  /api/txs/?address=mmhmMNfBiZZ37g1tgg2t8DDbNoEdqKVxAL\n```\n\n### Transactions for multiple addresses\nGET method:\n```\n  /api/addrs/[:addrs]/txs[?from=&to=]\n  /api/addrs/2NF2baYuJAkCKo5onjUKEPdARQkZ6SYyKd5,2NAre8sX2povnjy4aeiHKeEh97Qhn97tB1f/txs?from=0&to=20\n```\n\nPOST method:\n```\n  /api/addrs/txs\n```\n\nPOST params:\n```\naddrs: 2NF2baYuJAkCKo5onjUKEPdARQkZ6SYyKd5,2NAre8sX2povnjy4aeiHKeEh97Qhn97tB1f\nfrom (optional): 0\nto (optional): 20\n```\n\nSample output:\n```\n{ totalItems: 100,\n  from: 0,\n  to: 20,\n  items:\n    [ { txid: '3e81723d069b12983b2ef694c9782d32fca26cc978de744acbc32c3d3496e915',\n       version: 1,\n       locktime: 0,\n       vin: [Object],\n       vout: [Object],\n       blockhash: '00000000011a135e5277f5493c52c66829792392632b8b65429cf07ad3c47a6c',\n       confirmations: 109367,\n       time: 1393659685,\n       blocktime: 1393659685,\n       valueOut: 0.3453,\n       size: 225,\n       firstSeenTs: undefined,\n       valueIn: 0.3454,\n       fees: 0.0001 },\n      { ... },\n      { ... },\n      ...\n      { ... }\n    ] \n }\n```\n\nNote: if pagination params are not specified, the result is an array of transactions.\n\n\n### Transaction broadcasting\nPOST method:\n```\n  /api/tx/send\n```\nPOST params:\n```\n  rawtx: \"signed transaction as hex string\"\n\n  eg\n\n  rawtx: 01000000017b1eabe0209b1fe794124575ef807057c77ada2138ae4fa8d6c4de0398a14f3f00000000494830450221008949f0cb400094ad2b5eb399d59d01c14d73d8fe6e96df1a7150deb388ab8935022079656090d7f6bac4c9a94e0aad311a4268e082a725f8aeae0573fb12ff866a5f01ffffffff01f0ca052a010000001976a914cbc20a7664f2f69e5355aa427045bc15e7c6c77288ac00000000\n\n```\nPOST response:\n```\n  {\n      txid: [:txid]\n  }\n\n  eg\n\n  {\n      txid: \"c7736a0a0046d5a8cc61c8c3c2821d4d7517f5de2bc66a966011aaa79965ffba\"\n  }\n```\n\n### Historic blockchain data sync status\n```\n  /api/sync\n```\n\n### Live network p2p data sync status\n```\n  /api/peer\n```\n\n### Status of the auroracoin network\n```\n  /api/status?q=xxx\n```\n\nWhere \"xxx\" can be:\n\n * getInfo\n * getDifficulty\n * getTxOutSetInfo\n * getBestBlockHash\n * getLastBlockHash\n\n## Web Socket API\nThe web socket API is served using [socket.io](http://socket.io).\n\nThe following are the events published by insight:\n\n'tx': new transaction received from network. This event is published in the 'inv' room. Data will be a app/models/Transaction object.\nSample output:\n```\n{\n  \"txid\":\"00c1b1acb310b87085c7deaaeba478cef5dc9519fab87a4d943ecbb39bd5b053\",\n  \"processed\":false\n  ...\n}\n```\n\n\n'block': new block received from network. This event is published in the 'inv' room. Data will be a app/models/Block object.\nSample output:\n```\n{\n  \"hash\":\"000000004a3d187c430cd6a5e988aca3b19e1f1d1727a50dead6c8ac26899b96\",\n  \"time\":1389789343,\n  ...\n}\n```\n\n'<bitcoinAddress>': new transaction concerning <bitcoinAddress> received from network. This event is published in the '<bitcoinAddress>' room.\n\n'status': every 1% increment on the sync task, this event will be triggered. This event is published in the 'sync' room.\n\nSample output:\n```\n{\n  blocksToSync: 164141,\n  syncedBlocks: 475,\n  upToExisting: true,\n  scanningBackward: true,\n  isEndGenesis: true,\n  end: \"000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\",\n  isStartGenesis: false,\n  start: \"000000009f929800556a8f3cfdbe57c187f2f679e351b12f7011bfc276c41b6d\"\n}\n```\n\n### Example Usage\n\nThe following html page connects to the socket.io insight API and listens for new transactions.\n\nhtml\n```\n<html>\n<body>\n  <script src=\"http://<insight-server>:<port>/socket.io/socket.io.js\"></script>\n  <script>\n    eventToListenTo = 'tx'\n    room = 'inv'\n\n    var socket = io(\"http://<insight-server>:<port>/\");\n    socket.on('connect', function() {\n      // Join the room.\n      socket.emit('subscribe', room);\n    })\n    socket.on(eventToListenTo, function(data) {\n      console.log(\"New transaction received: \" + data.txid)\n    })\n  </script>\n</body>\n</html>\n```\n\n## License\n(The MIT License)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
 +  "readmeFilename": "README.md",
 +  "_id": "insight-bitcore-api@0.2.12",
 +  "_shasum": "16c06568d095c2b95033b6aeab91403fc5b0f63f",
 +  "_from": "git://github.com/smileycoin/insight-api.git",
 +  "_resolved": "git://github.com/smileycoin/insight-api.git#0738db4d292ee6b25ac55e7ae0a74c7000f60a19"
++=======
+   }
++>>>>>>> origin/master
  }
